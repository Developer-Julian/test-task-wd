// <auto-generated />
namespace TestTaskWD.Services
{
    using System.Threading.Tasks;
    using Serilog;
    using TestTaskWD.Logging;
    using TestTaskWD.Models;
    using TestTaskWD.PrivateApi.ShortUrl;

    internal class ShortUrlService : IShortUrlService
    {
        private readonly ILogger logger;
        private readonly IShortUrlApiService shortUrlApiService;

        public ShortUrlService(IShortUrlApiService shortUrlApiService)
        {
            this.shortUrlApiService = shortUrlApiService;
            this.logger = Log.ForContext<ShortUrlService>();
        }

        public async Task<GridOfShortenUrlModel> AddNewBatchUrlAsync(string userId, CreateNewShortUrlRequestModel request)
        {
            var localLogger = this.logger.WithUserId(userId);
            localLogger.Information("Start adding new batch urls");
            var response = await this.shortUrlApiService.AddNewBatchUrlAsync(request, userId);
            localLogger.Information("Adding complete");

            return response;
        }

        public async Task<GridOfShortenUrlModel> GetUrlsAsync(string userId, string filterText, string sort, string sortDirection, int skip, int take)
        {
            return await this.shortUrlApiService.GetUrlsAsync(userId, filterText, sort, sortDirection, skip, take);
        }

        public async Task DeleteUrlAsync(string userId, string urlHash)
        {
            var localLogger = this.logger
                .WithUserId(userId)
                .WithUrlHash(urlHash);
            localLogger.Information($"Start deleting url");
            await this.shortUrlApiService.DeleteUrlAsync(urlHash, userId);
            localLogger.Information("Deleting complete");
        }

        public async Task<int> UpdateClickUrlAsync(string userId, string urlHash)
        {
            var localLogger = this.logger
                .WithUserId(userId)
                .WithUrlHash(urlHash);
            localLogger.Information($"Click url");
            var response = await this.shortUrlApiService.UpdateClickUrlAsync(urlHash, userId);

            return response;
        }
    }
}