// <auto-generated />
namespace TestTaskWD.Extensions
{
    using System;
    using System.Threading.Tasks;
    using Microsoft.Extensions.Caching.Memory;
    using TestTaskWD.Configuration;

    internal static class MemoryCacheExtensions
    {
        public static async Task<TValue> FindOrCreateAsync<TValue>(
            this IMemoryCache cache,
            string cacheKey,
            Func<Task<TValue>> factory,
            CacheConfiguration configuration)
        {
            return configuration.Enabled
                ? await cache.FindOrCreateAsync(
                    cacheKey,
                    async () => await factory(),
                    new MemoryCacheEntryOptions
                    {
                        AbsoluteExpirationRelativeToNow = configuration.AbsoluteExpiration,
                    })
                : await factory();
        }

        private static async Task<TValue> FindOrCreateAsync<TValue>(
            this IMemoryCache cache,
            string cacheKey,
            Func<Task<TValue>> factoryAsync,
            MemoryCacheEntryOptions cacheOptions)
        {
            if (cache.TryGetValue<TValue>(cacheKey, out var cachedValue))
            {
                return cachedValue;
            }

            var createdValue = await factoryAsync();
            if (createdValue == null)
            {
                return default!;
            }

            cache.Set(cacheKey, createdValue, cacheOptions);
            return createdValue;
        }
    }
}