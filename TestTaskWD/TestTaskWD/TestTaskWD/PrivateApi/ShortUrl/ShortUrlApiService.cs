// <auto-generated />
namespace TestTaskWD.PrivateApi.ShortUrl
{
    using System.Threading.Tasks;
    using Serilog;
    using TestTaskWD.Models;
    using TestTaskWD.Proxy.ShortUrlPrivateApi;

    internal sealed class ShortUrlApiService : ApiServiceBase<IShortUrlClientFactory>, IShortUrlApiService
    {
        public ShortUrlApiService(IShortUrlClientFactory clientFactory)
            : base(clientFactory)
        {
        }

        protected override ILogger Logger { get; } = Log.ForContext<ShortUrlApiService>();

        public async Task<GridOfShortenUrlModel> AddNewBatchUrlAsync(CreateNewShortUrlRequestModel request, string userGuid)
        {
            return await this.ExecuteAsync(
                nameof(IShortUrlClient.AddNewBatchUrlAsync),
                new { request.FullUrls, userGuid },
                factory => factory.CreateShortUrlClientAsync(),
                client => client.AddNewBatchUrlAsync(request, userGuid));
        }

        public async Task<GridOfShortenUrlModel> GetUrlsAsync(
            string userGuid,
            string filterText,
            string sort,
            string sortDirection,
            int skip,
            int take)
        {
            return await this.ExecuteAsync(
                nameof(IShortUrlClient.AddNewBatchUrlAsync),
                new { userGuid, filterText, sort, sortDirection, skip, take },
                factory => factory.CreateShortUrlClientAsync(),
                client => client.GetUrlsAsync(userGuid, filterText, sort, sortDirection, skip, take));
        }

        public async Task DeleteUrlAsync(string urlHash, string userGuid)
        {
            await this.ExecuteAsync(
                nameof(IShortUrlClient.AddNewBatchUrlAsync),
                new { urlHash, userGuid },
                factory => factory.CreateShortUrlClientAsync(),
                client => client.DeleteUrlAsync(urlHash, userGuid));
        }

        public async Task<int> UpdateClickUrlAsync(string urlHash, string userGuid)
        {
            return await this.ExecuteAsync(
                nameof(IShortUrlClient.AddNewBatchUrlAsync),
                new { urlHash, userGuid },
                factory => factory.CreateShortUrlClientAsync(),
                client => client.UpdateClickUrlAsync(urlHash, userGuid));
        }
    }
}