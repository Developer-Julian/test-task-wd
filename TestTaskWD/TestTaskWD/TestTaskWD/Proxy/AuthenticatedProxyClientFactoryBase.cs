// <auto-generated />
namespace TestTaskWD.Proxy
{
    using System;
    using System.Net.Http;
    using System.Threading.Tasks;
    using Microsoft.Extensions.Caching.Memory;
    using Serilog;
    using TestTaskWD.Configuration;
    using TestTaskWD.Configuration.Vault;
    using TestTaskWD.Extensions;
    using TestTaskWD.Services;

    internal abstract class AuthenticatedProxyClientFactoryBase
        : ProxyClientFactoryBase
    {
        private readonly VaultConfiguration vaultConfiguration;

        private readonly IVaultService vaultService;

        private readonly IMemoryCache memoryCache;

        protected AuthenticatedProxyClientFactoryBase(
            ServiceConfiguration serviceConfiguration,
            IHttpClientFactory httpClientFactory,
            VaultConfiguration vaultConfiguration,
            IVaultService vaultService,
            IMemoryCache memoryCache)
            : base(serviceConfiguration, httpClientFactory)
        {
            this.vaultConfiguration = vaultConfiguration;
            this.vaultService = vaultService;
            this.memoryCache = memoryCache;
        }

        protected abstract ILogger Logger { get; }

        protected string VaultApiKeySuffix { get; set; } = null!;

        protected async Task<AuthenticatedProxyClientConfiguration> CreateAuthenticatedProxyConfigurationAsync(
            Func<ServiceConfiguration, string> getApiBaseUrl)
        {
            return new AuthenticatedProxyClientConfiguration(
                getApiBaseUrl(this.ServiceConfiguration),
                await this.FindApiKeyAsync());
        }

        protected async Task<AuthenticatedProxyClientConfiguration> CreateAuthenticatedProxyConfigurationAsync(
            string apiBaseUrl)
        {
            return new AuthenticatedProxyClientConfiguration(
                apiBaseUrl,
                await this.FindApiKeyAsync());
        }

        private async Task<string> FindApiKeyAsync()
        {
            var cacheKey = $"{nameof(AuthenticatedProxyClientFactoryBase)}_{this.VaultApiKeySuffix}";
            return await this.memoryCache.FindOrCreateAsync(
                cacheKey,
                this.FindApiKeyInternalAsync,
                this.vaultConfiguration.Cache);
        }

        private async Task<string> FindApiKeyInternalAsync()
        {
            if (!this.vaultConfiguration.Enabled)
            {
                this.Logger.Information("Vault is disabled");
                return string.Empty;
            }

            var result = await this.vaultService.FindApiKeyAsync(this.VaultApiKeySuffix);
            if (result != null)
            {
                return result;
            }

            this.Logger.Error("Vault ApiKey '{ApiKeySuffix}' not found", this.VaultApiKeySuffix);
            throw new ApplicationException($"Vault ApiKey '{this.VaultApiKeySuffix}' not found");
        }
    }
}
