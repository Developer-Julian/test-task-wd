// <auto-generated />
namespace TestTaskWD.Controllers
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Http;
    using Microsoft.AspNetCore.Mvc;
    using TestTaskWD.Exceptions;
    using TestTaskWD.Extensions;
    using TestTaskWD.Models;
    using TestTaskWD.Services;

    [Route("short-url")]
    public class ShortUrlController : ControllerBase
    {
        private readonly IShortUrlService shortUrlService;

        public ShortUrlController(IShortUrlService shortUrlService)
        {
            this.shortUrlService = shortUrlService;
        }

        [HttpPost]
        [ProducesResponseType(typeof(GridOfShortenUrlModel), StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [Route("short")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> AddNewBatchUrlAsync([FromBody] CreateNewShortUrlRequestModel request)
        {
            try
            {
                var userId = this.HttpContext.GetUserId();
                var result = await this.shortUrlService.AddNewBatchUrlAsync(userId, request);
                return this.StatusCode(StatusCodes.Status201Created, result);
            }
            catch (Exception)
            {
                return this.BadRequest();
            }
        }

        [HttpGet]
        [ProducesResponseType(typeof(GridOfShortenUrlModel), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [Route("short")]
        public async Task<IActionResult> GetUrlsAsync(
            [FromQuery] string filterText = "",
            [FromQuery] string sort = "",
            [FromQuery] string sortDirection = "",
            [FromQuery] int skip = 0,
            [FromQuery] int take = 10)
        {
            try
            {
                var userId = this.HttpContext.GetUserId();
                (take, skip) = EnsureNonNegative(take, skip, 10, 0);
                var result = await this.shortUrlService.GetUrlsAsync(
                    userId,
                    filterText,
                    sort,
                    sortDirection,
                    skip,
                    take);
                return this.Ok(result);
            }
            catch (ShortUrlNotFoundException)
            {
                return this.Ok(new GridOfShortenUrlModel(0, new List<ShortUrlViewModel>()));
            }
            catch (Exception)
            {
                return this.BadRequest();
            }
        }

        [HttpDelete]
        [ProducesDefaultResponseType]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [Route("short/{urlHash}")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteUrlAsync([FromRoute] [Required] string urlHash)
        {
            try
            {
                var userId = this.HttpContext.GetUserId();
                await this.shortUrlService.DeleteUrlAsync(userId, urlHash);
                return this.StatusCode(StatusCodes.Status204NoContent, true);
            }
            catch (ShortUrlNotFoundException)
            {
                return this.StatusCode(StatusCodes.Status204NoContent, true);
            }
            catch (Exception)
            {
                return this.BadRequest();
            }
        }

        [HttpPut]
        [ProducesDefaultResponseType]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [Route("short/{urlHash}")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> UpdateClickUrlAsync([FromRoute] [Required] string urlHash)
        {
            try
            {
                var userId = this.HttpContext.GetUserId();
                var clickCount = await this.shortUrlService.UpdateClickUrlAsync(userId, urlHash);
                return this.Ok(clickCount);
            }
            catch (ShortUrlNotFoundException)
            {
                return this.Ok(0);
            }
            catch (Exception)
            {
                return this.BadRequest();
            }
        }

        private static (int Take, int Skip) EnsureNonNegative(int take, int skip, int defaultTake, int defaultSkip)
        {
            var resultTake = take < 0 ? defaultTake : take;
            var resultSkip = skip < 0 ? defaultSkip : skip;

            return (resultTake, resultSkip);
        }
    }
}