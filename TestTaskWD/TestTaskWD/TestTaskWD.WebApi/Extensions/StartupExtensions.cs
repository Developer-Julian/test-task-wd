// <auto-generated />
namespace TestTaskWD.WebApi.Extensions
{
    using System;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.Extensions.DependencyInjection;
    using TestTaskWD.WebApi.Authentication;
    using TestTaskWD.WebApi.Configuration;
    using TestTaskWD.WebApi.DataAccess.DAL;
    using TestTaskWD.WebApi.Infrastructure;
    using TestTaskWD.WebApi.Services;

    public static class StartupExtensions
    {
        public static IServiceCollection AddConfig(this IServiceCollection serviceCollection, Config config)
        {
            return serviceCollection
                .AddSingleton(config.Redis)
                .AddSingleton(config.DataBase)
                .AddSingleton(config.Vault)
                .AddSingleton(config.Service);
        }

        public static IServiceCollection AddServices(this IServiceCollection serviceCollection)
        {
            return serviceCollection
                .AddMemoryCache()
                .AddTransient<IClientProfileRepository, ClientProfileRepository>()
                .AddTransient<IShortUrlService, ShortUrlService>()
                .AddTransient<IUrlShortenerService, UrlShortenerService>()
                .AddTransient<IShortUrlCacheService, ShortUrlCacheService>()
                .AddTransient<IShortUrlRepository, ShortUrlRepository>();
        }

        public static IServiceCollection AddDbContext(
            this IServiceCollection serviceCollection,
            DataBaseConfiguration config)
        {
            return serviceCollection.AddDbContext<ShortUrlContext>(
                options => options.UseSqlServer(
                    config.ConnectionString,
                    sqlOptions =>
                    {
                        if (!config.ResiliencyEnabled)
                        {
                            return;
                        }

                        if (config.ResiliencyCount.HasValue)
                        {
                            if (config.ResiliencyDelay.HasValue)
                            {
                                sqlOptions.EnableRetryOnFailure(
                                    config.ResiliencyCount.Value,
                                    TimeSpan.FromSeconds(config.ResiliencyDelay.Value),
                                    null);
                            }
                            else
                            {
                                sqlOptions.EnableRetryOnFailure(config.ResiliencyCount.Value);
                            }
                        }
                        else
                        {
                            sqlOptions.EnableRetryOnFailure();
                        }
                    }));
        }
    }
}