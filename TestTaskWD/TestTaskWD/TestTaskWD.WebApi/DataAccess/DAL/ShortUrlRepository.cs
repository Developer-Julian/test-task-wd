// <auto-generated />
namespace TestTaskWD.WebApi.DataAccess.DAL
{
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.EntityFrameworkCore;
    using TestTaskWD.WebApi.Configuration;
    using TestTaskWD.WebApi.DataAccess.Domain.Entities;

    internal sealed class ShortUrlRepository : IShortUrlRepository
    {
        private readonly ShortUrlContext context;
        private readonly DataBaseConfiguration dataBaseConfiguration;

        public ShortUrlRepository(ShortUrlContext context, DataBaseConfiguration dataBaseConfiguration)
        {
            this.context = context;
            this.dataBaseConfiguration = dataBaseConfiguration;
        }

        public async Task<int> UpdateUrlAsync(string userId, string urlHash)
        {
            if (!this.CheckDbIsEnabled())
            {
                return 0;
            }

            var entity = await this.context.ShortUrls
                .AsNoTracking()
                .Where(x => !x.IsRemoved)
                .Where(x => x.CreatedBy == userId)
                .Where(x => x.UrlHash == urlHash)
                .FirstAsync();

            entity.EditedOn = DateTime.Now;
            entity.UrlClickCount++;

            await this.context.SaveChangesAsync();
            return entity.UrlClickCount;
        }

        public async Task DeleteUrlAsync(string userId, string urlHash)
        {
            if (!this.CheckDbIsEnabled())
            {
                return;
            }

            var entity = await this.context.ShortUrls
                .AsNoTracking()
                .Where(x => !x.IsRemoved)
                .Where(x => x.CreatedBy == userId)
                .Where(x => x.UrlHash == urlHash)
                .FirstAsync();

            this.context.ShortUrls.Remove(entity);
            await this.context.SaveChangesAsync();
        }

        public async Task<ShortUrlEntity> AddUrlAsync(string userId, string fullUrl, string shortUrl, string urlHash)
        {
            if (!this.CheckDbIsEnabled())
            {
                return new ShortUrlEntity();
            }

            var existedUrl = await this.context.ShortUrls
                .AsNoTracking()
                .Where(x => !x.IsRemoved)
                .Where(x => x.CreatedBy == userId)
                .Where(x => x.FullUrl == fullUrl)
                .FirstOrDefaultAsync();
            if (existedUrl != null)
            {
                return existedUrl;
            }

            var entity = new ShortUrlEntity
            {
                CreatedBy = userId,
                CreatedOn = DateTime.Now,
                EditedBy = userId,
                EditedOn = DateTime.Now,
                FullUrl = fullUrl,
                ShortUrl = shortUrl,
                IsRemoved = false,
                UrlHash = urlHash,
                UrlClickCount = 0,
            };

            await this.context.ShortUrls.AddAsync(entity);

            return entity;
        }

        public async Task CompleteAddingAsync()
        {
            if (!this.CheckDbIsEnabled())
            {
                return;
            }

            await this.context.SaveChangesAsync();
        }

        private bool CheckDbIsEnabled()
        {
            return this.dataBaseConfiguration.IsEnabled;
        }
    }
}