// <auto-generated />
namespace TestTaskWD.WebApi.Controllers.V1
{
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Authorization;
    using Microsoft.AspNetCore.Http;
    using Microsoft.AspNetCore.Mvc;
    using Serilog;
    using TestTaskWD.WebApi.Exceptions;
    using TestTaskWD.WebApi.Extensions;
    using TestTaskWD.WebApi.Models.V1;
    using TestTaskWD.WebApi.Services;
    using TestTaskWD.WebApi.Services.Models;

    [ApiController]
    [Authorize]
    [Route("v1/short-url")]
    public class ShortUrlController : ControllerBase
    {
        private readonly IShortUrlService shortUrlService;
        private readonly ILogger logger = Log.ForContext<ShortUrlController>();

        public ShortUrlController(IShortUrlService shortUrlService)
        {
            this.shortUrlService = shortUrlService;
        }

        [HttpPost]
        [ProducesResponseType(typeof(GridOfShortenUrlModel), StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [Route("short/{userId}")]
        public async Task<IActionResult> AddNewBatchUrlAsync(
            [FromBody] CreateNewShortUrlRequestModel request,
            [FromRoute] [Required] string userId)
        {
            try
            {
                var result = await this.shortUrlService.AddNewBatchUrlAsync(userId, request);
                return this.StatusCode(StatusCodes.Status201Created, result);
            }
            catch (Exception e)
            {
                this.logger.WithUserId(userId).Error("Error while adding new url batch", e);
                return this.BadRequest(e);
            }
        }

        [HttpGet]
        [ProducesResponseType(typeof(GridOfShortenUrlModel), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [Route("short/{userId}")]
        public async Task<IActionResult> GetUrlsAsync(
            [FromRoute] [Required] string userId,
            [FromQuery] string filterText = "",
            [FromQuery] string sort = "",
            [FromQuery] string sortDirection = "",
            [FromQuery] int skip = 0,
            [FromQuery] int take = 10)
        {
            try
            {
                (take, skip) = this.EnsureNonNegative(take, skip, 10, 0);
                var result = await this.shortUrlService.GetUrlsAsync(
                    userId,
                    filterText,
                    sort,
                    sortDirection,
                    skip,
                    take);
                return this.Ok(result);
            }
            catch (ShortUrlNotFoundException)
            {
                return this.NotFound();
            }
            catch (Exception e)
            {
                this.logger.WithUserId(userId).Error("Error while getting user urls", e);
                return this.BadRequest(e);
            }
        }

        [HttpDelete]
        [ProducesDefaultResponseType]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [Route("short/{userId}/{urlHash}")]
        public async Task<IActionResult> DeleteUrlAsync(
            [FromRoute] [Required] string userId,
            [FromRoute] [Required] string urlHash)
        {
            try
            {
                await this.shortUrlService.DeleteUrlAsync(userId, urlHash);
                return this.NoContent();
            }
            catch (ShortUrlNotFoundException)
            {
                return this.NotFound();
            }
            catch (Exception e)
            {
                this.logger.WithUserId(userId).Error("Error while getting user urls", e);
                return this.BadRequest(e);
            }
        }

        [HttpPut]
        [ProducesDefaultResponseType]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [Route("short/{userId}/{urlHash}")]
        public async Task<IActionResult> UpdateClickUrlAsync(
            [FromRoute] [Required] string userId,
            [FromRoute] [Required] string urlHash)
        {
            try
            {
                var clickCount = await this.shortUrlService.UpdateClickUrlAsync(userId, urlHash);
                return this.Ok(clickCount);
            }
            catch (ShortUrlNotFoundException)
            {
                return this.NotFound();
            }
            catch (Exception e)
            {
                return this.BadRequest(e);
            }
        }

        private (int Take, int Skip) EnsureNonNegative(int take, int skip, int defaultTake, int defaultSkip)
        {
            var resultTake = take < 0 ? defaultTake : take;
            var resultSkip = skip < 0 ? defaultSkip : skip;

            return (resultTake, resultSkip);
        }
    }
}